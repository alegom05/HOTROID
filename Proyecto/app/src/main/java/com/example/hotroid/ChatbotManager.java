package com.example.hotroid;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class ChatbotManager {
    private static ChatbotManager instance;
    private FirestoreService firestoreService;
    private List<ChatbotOption> options;

    private ChatbotManager() {
        firestoreService = FirestoreService.getInstance();
        initializeOptions();
    }

    public static ChatbotManager getInstance() {
        if (instance == null) {
            instance = new ChatbotManager();
        }
        return instance;
    }

    public interface ChatbotCallback {
        void onResponse(String response);
        void onError(String error);
        void onShowOptions(List<ChatbotOption> options);
    }

    private void initializeOptions() {
        options = new ArrayList<>();
        options.add(new ChatbotOption("1", "Informaci√≥n general del hotel", "Obtener informaci√≥n sobre el hotel", 1));
        options.add(new ChatbotOption("2", "Ver mis reservas", "Consultar tus reservas actuales", 2));
        options.add(new ChatbotOption("3", "Servicios disponibles", "Ver servicios y amenidades del hotel", 3));
        options.add(new ChatbotOption("4", "Atenci√≥n al cliente/Contacto", "Informaci√≥n de contacto del hotel", 4));
        options.add(new ChatbotOption("5", "Pol√≠ticas del hotel", "Consultar pol√≠ticas y condiciones", 5));
        options.add(new ChatbotOption("0", "Volver al men√∫ principal", "Regresar al men√∫ de opciones", 0));
    }

    public void showMainMenu(ChatbotCallback callback) {
        callback.onShowOptions(options);
    }

    public void processUserInput(String input, String hotelId, String userId, ChatbotCallback callback) {
        try {
            int optionNumber = Integer.parseInt(input.trim());
            handleOption(optionNumber, hotelId, userId, callback);
        } catch (NumberFormatException e) {
            callback.onError("Por favor, ingrese un n√∫mero v√°lido (0-5).");
        }
    }

    private void handleOption(int optionNumber, String hotelId, String userId, ChatbotCallback callback) {
        switch (optionNumber) {
            case 1:
                getHotelInfo(hotelId, callback);
                break;
            case 2:
                getUserReservations(hotelId, userId, callback);
                break;
            case 3:
                getHotelServices(hotelId, callback);
                break;
            case 4:
                getContactInfo(hotelId, callback);
                break;
            case 5:
                getHotelPolicies(hotelId, callback);
                break;
            case 0:
                showMainMenu(callback);
                break;
            default:
                callback.onError("Opci√≥n no v√°lida. Por favor, seleccione una opci√≥n del 0 al 5.");
                break;
        }
    }

    private void getHotelInfo(String hotelId, ChatbotCallback callback) {
        firestoreService.getHotelInfo(hotelId, new FirestoreService.FirestoreCallback<Map<String, Object>>() {
            @Override
            public void onSuccess(Map<String, Object> result) {
                StringBuilder response = new StringBuilder("üìç **Informaci√≥n del Hotel**\n\n");
                
                if (result.containsKey("name")) {
                    response.append("üè® **Nombre:** ").append(result.get("name")).append("\n");
                }
                if (result.containsKey("description")) {
                    response.append("üìù **Descripci√≥n:** ").append(result.get("description")).append("\n");
                }
                if (result.containsKey("amenities")) {
                    response.append("üéØ **Amenidades:** ").append(result.get("amenities")).append("\n");
                }
                if (result.containsKey("address")) {
                    response.append("üìç **Direcci√≥n:** ").append(result.get("address")).append("\n");
                }
                
                response.append("\n¬øHay algo m√°s en lo que pueda ayudarle? Digite 0 para ver el men√∫ principal.");
                callback.onResponse(response.toString());
            }

            @Override
            public void onError(String error) {
                callback.onError("Lo siento, no pude obtener la informaci√≥n del hotel en este momento. Por favor, intente m√°s tarde.");
            }
        });
    }

    private void getUserReservations(String hotelId, String userId, ChatbotCallback callback) {
        firestoreService.getUserReservations(userId, hotelId, new FirestoreService.FirestoreCallback<List<Map<String, Object>>>() {
            @Override
            public void onSuccess(List<Map<String, Object>> result) {
                StringBuilder response = new StringBuilder("üìã **Sus Reservas**\n\n");
                
                if (result.isEmpty()) {
                    response.append("No tiene reservas activas en este hotel.\n");
                } else {
                    for (Map<String, Object> reservation : result) {
                        response.append("üî∏ **Reserva ID:** ").append(reservation.get("id")).append("\n");
                        response.append("üìÖ **Check-in:** ").append(reservation.get("checkIn")).append("\n");
                        response.append("üìÖ **Check-out:** ").append(reservation.get("checkOut")).append("\n");
                        response.append("üìä **Estado:** ").append(reservation.get("status")).append("\n");
                        if (reservation.containsKey("details")) {
                            response.append("üìã **Detalles:** ").append(reservation.get("details")).append("\n");
                        }
                        response.append("\n");
                    }
                }
                
                response.append("¬øNecesita ayuda con alguna reserva? Digite 0 para ver el men√∫ principal.");
                callback.onResponse(response.toString());
            }

            @Override
            public void onError(String error) {
                callback.onError("No pude acceder a sus reservas en este momento. Por favor, intente m√°s tarde.");
            }
        });
    }

    private void getHotelServices(String hotelId, ChatbotCallback callback) {
        firestoreService.getHotelServices(hotelId, new FirestoreService.FirestoreCallback<List<Map<String, Object>>>() {
            @Override
            public void onSuccess(List<Map<String, Object>> result) {
                StringBuilder response = new StringBuilder("üõéÔ∏è **Servicios Disponibles**\n\n");
                
                if (result.isEmpty()) {
                    response.append("Actualmente no hay servicios disponibles.\n");
                } else {
                    for (Map<String, Object> service : result) {
                        response.append("üî∏ **").append(service.get("name")).append("**\n");
                        if (service.containsKey("description")) {
                            response.append("   üìù ").append(service.get("description")).append("\n");
                        }
                        if (service.containsKey("price")) {
                            response.append("   üí∞ Precio: $").append(service.get("price")).append("\n");
                        }
                        response.append("\n");
                    }
                }
                
                response.append("¬øLe interesa alg√∫n servicio en particular? Digite 0 para ver el men√∫ principal.");
                callback.onResponse(response.toString());
            }

            @Override
            public void onError(String error) {
                callback.onError("No pude obtener la informaci√≥n de servicios en este momento. Por favor, intente m√°s tarde.");
            }
        });
    }

    private void getContactInfo(String hotelId, ChatbotCallback callback) {
        firestoreService.getHotelContact(hotelId, new FirestoreService.FirestoreCallback<Map<String, Object>>() {
            @Override
            public void onSuccess(Map<String, Object> result) {
                StringBuilder response = new StringBuilder("üìû **Informaci√≥n de Contacto**\n\n");
                
                if (result.containsKey("phone")) {
                    response.append("üì± **Tel√©fono:** ").append(result.get("phone")).append("\n");
                }
                if (result.containsKey("email")) {
                    response.append("‚úâÔ∏è **Email:** ").append(result.get("email")).append("\n");
                }
                if (result.containsKey("address")) {
                    response.append("üìç **Direcci√≥n:** ").append(result.get("address")).append("\n");
                }
                
                response.append("\nüïê **Horarios de Atenci√≥n:**\n");
                response.append("Lunes a Domingo: 24 horas\n");
                response.append("\nEstamos aqu√≠ para ayudarle. Digite 0 para ver el men√∫ principal.");
                
                callback.onResponse(response.toString());
            }

            @Override
            public void onError(String error) {
                callback.onError("No pude obtener la informaci√≥n de contacto en este momento. Por favor, intente m√°s tarde.");
            }
        });
    }

    private void getHotelPolicies(String hotelId, ChatbotCallback callback) {
        firestoreService.getHotelPolicies(hotelId, new FirestoreService.FirestoreCallback<Map<String, Object>>() {
            @Override
            public void onSuccess(Map<String, Object> result) {
                StringBuilder response = new StringBuilder("üìã **Pol√≠ticas del Hotel**\n\n");
                
                if (result.containsKey("checkInTime")) {
                    response.append("üïê **Check-in:** ").append(result.get("checkInTime")).append("\n");
                }
                if (result.containsKey("checkOutTime")) {
                    response.append("üïê **Check-out:** ").append(result.get("checkOutTime")).append("\n");
                }
                if (result.containsKey("cancellationPolicy")) {
                    response.append("‚ùå **Pol√≠tica de Cancelaci√≥n:** ").append(result.get("cancellationPolicy")).append("\n");
                }
                if (result.containsKey("policies")) {
                    response.append("üìù **Pol√≠ticas Generales:**\n").append(result.get("policies")).append("\n");
                }
                
                response.append("\n¬øTiene alguna pregunta sobre nuestras pol√≠ticas? Digite 0 para ver el men√∫ principal.");
                callback.onResponse(response.toString());
            }

            @Override
            public void onError(String error) {
                callback.onError("No pude obtener las pol√≠ticas del hotel en este momento. Por favor, intente m√°s tarde.");
            }
        });
    }

    public String getWelcomeMessage() {
        return "ü§ñ **¬°Bienvenido al Asistente Virtual!**\n\n" +
               "Estoy aqu√≠ para ayudarle con sus consultas sobre el hotel.\n" +
               "Por favor, seleccione una opci√≥n digitando el n√∫mero correspondiente:\n\n" +
               "1Ô∏è‚É£ Informaci√≥n general del hotel\n" +
               "2Ô∏è‚É£ Ver mis reservas\n" +
               "3Ô∏è‚É£ Servicios disponibles\n" +
               "4Ô∏è‚É£ Atenci√≥n al cliente/Contacto\n" +
               "5Ô∏è‚É£ Pol√≠ticas del hotel\n" +
               "0Ô∏è‚É£ Volver al men√∫ principal\n\n" +
               "üí° Simplemente digite el n√∫mero de la opci√≥n que desea.";
    }
}